/*────────────────────────────────────────────────────────────────────────────────────────────────*/

class Telegraph {
// Адрес к источнику
    url = 'https://api.telegra.ph';
    
// Адрес для проверки доступа
    check = 'https://edit.telegra.ph/check';
    
/*┌──────────────────────────────────┐
  │ Возвращает пользователя по ключу │
  └──────────────────────────────────┘*/
    async getUser(key = '') {
    // Получаем ключ-доступа
         let access_token = 'cb97d294a7490e05c0c78d99cdf673b6d2c0c87ad1bad5be828e326ff7f4';
        
    // Создаем запрос к источнику
        let res = await this.request('getAccountInfo', {
            access_token: access_token, // Ключ-доступа
            fields: '["short_name"]'      // Список полей
        });
        
    // Возвращаем ответ
        return res;
    }
    
/*┌────────────────────────────┐
  │ Создает запрос к источнику │
  └────────────────────────────┘*/
    async request(method = '', params = '') {
    // Создаем тело запроса
        let body = new FormData();
        
    // Добавляем список параметров в тело запроса
        Object.keys(params).forEach(p => body.set(p, params[p]));
        
    // Создаем URL-запроса
        let url = new URL(method, this.url);
        
    // Данные получены успешно
        try {
        // Создаем запрос к источнику
            let res = await fetch(url, {
                body: body,    // Тело запроса
                method: 'POST' // Метод запроса
            });
            
        // Данные получены успешно
            if (res.ok) {
            // Переводим в JSON
                res = await res.json();
                
            // Не удалось получить данные
                if (!res.ok) {
                    return this.reject(url, [
                        'Ошибка: '+ res.error
                    ]);
                }
                
            // Данные получены успешно
                return res;
            }
            
        // Ошибка при обработке данных на стороне источник
            else {
                return this.reject(url, [
                    'Ошибка при обработке данных на стороне источник!',
                    'Код: ' + res.status
                ]);
            }
        }
        
    // Ошибка при подключении к источнику
        catch (e) {
            return this.reject(url, [
                'Ошибка при подключении к источнику!'
            ]);
        }
    }
    
/*┌─────────────────────────────┐
  │ Возвращает неудачный промис │
  └─────────────────────────────┘*/
    reject(url = '', error = []) {
    // Получаем список ошибок (без повторений)
        error = [...new Set(error.flat(Infinity))];
        
    // Переводим в строку
        error = error.join('\n');
        
    // Возвращаем тело ошибки
        return Promise.reject({
            ok: false,   // Статус
            url: url,    // URL-запроса
            error: error // Сообщение об ошибке
        });
    }
}

/*────────────────────────────────────────────────────────────────────────────────────────────────*/